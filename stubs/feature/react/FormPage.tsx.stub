import React from 'react';
import { Head, useForm, Link } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import { PageProps, BreadcrumbItem } from '@/types';
import { route } from 'ziggy-js';

// Definisikan tipe data untuk item
interface {{ StudlyName }} {
    id: number;
    // SYNC_FORM_ITEM_TYPE_START
    name: string;
    status: boolean;
    // SYNC_FORM_ITEM_TYPE_END
}

export default function FormPage({ auth, item }: PageProps<{ item?: {{ StudlyName }} }>) {

    const breadcrumbs: BreadcrumbItem[] = [
        {
            title: '{{ pluralSpacedName }}',
            href: route('{{ pluralKebabName }}.index'),
        },
        {
            title: item ? 'Edit' : 'Create',
            href: item ? route('{{ pluralKebabName }}.edit', item.id) : route('{{ pluralKebabName }}.create'),
        },
    ];

    // SYNC_FORM_DATA_START
    const { data, setData, post, put, processing, errors } = useForm<{
        name: string;
        status: boolean;
    }>({
        name: item?.name || '',
        status: item?.status ?? true,
    });
    // SYNC_FORM_DATA_END

    function handleSubmit(e: React.FormEvent) {
        e.preventDefault();
        if (item) {
            put(route('{{ pluralKebabName }}.update', item.id));
        } else {
            post(route('{{ pluralKebabName }}.store'));
        }
    }

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title={(item ? 'Edit' : 'Create') + ' {{ spacedName }}'} />

            <div className="flex h-full flex-1 flex-col gap-4 overflow-x-auto rounded-xl p-4">
                <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                    <div className="p-6 bg-white border-b border-gray-200">
                        <h3 className="text-xl font-semibold mb-6">{item ? 'Edit' : 'Create'} {{ spacedName }}</h3>
                        <form onSubmit={handleSubmit}>
                            {/* SYNC_FORM_FIELDS_START */}
                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
                                    Name
                                </label>
                                <input
                                    id="name"
                                    type="text"
                                    value={data.name}
                                    onChange={(e) => setData('name', e.target.value)}
                                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                />
                                {errors.name && <div className="text-red-500 text-xs mt-1">{errors.name}</div>}
                            </div>
                            <div className="mb-4">
                                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="status">
                                Status
                                </label>
                                <select
                                    id="status"
                                    value={data.status.toString()}
                                    onChange={e => setData('status', e.target.value === 'true')}
                                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                >
                                    <option value="true">Active</option>
                                    <option value="false">Inactive</option>
                                </select>
                            </div>
                            {/* SYNC_FORM_FIELDS_END */}

                            <div className="flex items-center justify-end mt-8">
                                <Link href={route('{{ pluralKebabName }}.index')} className="text-gray-600 mr-4">Cancel</Link>
                                <button type="submit" disabled={processing} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                    {item ? 'Update' : 'Create'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
}
